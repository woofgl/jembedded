#labels Phase-Implementation
<wiki:toc max_depth="3" />

= Introduction =

To test a JMS messaging application you can use the general guidelines given in the how to start section:

- Create a POJO class that extends from IntegrationTest.

- Annotate the class with desired annotations (in this case a JMS broker annotation would be right).

- Create the test methods and annotate them with @Test.

All the annotations relies on default values, except of course the minimum needed parameters. 


= Examples = 

Testing JMS Destinations (ActiveMQ Embbeded broker).

{{{

//Assert JMS Test Module.
import static org.jsemantic.jintegration.test.jms.Assert.*;

@ActiveMQServiceConfiguration
@ConnectionFactoryConfiguration

@QueueDestinationConfiguration(subject = "TEST.QueueA")
@TopicDestinationConfiguration(subject = "TEST.TopicA")

public class EmbeddedJMSIntegrationTest extends IntegrationTest {

	@Test
	public void testQueueDestinationCreation() {
		assertQueueDestinationCreation("TEST.TEST");
	}

	@Test
	public void testAnnotatedQueuDestinationCreation() {
		assertNotNull(getDestination(QueueDestinationConfiguration.class));
		assertReceiveMessage("TEST.QueueA");
		assertReceiveMessage(getDestination(QueueDestinationConfiguration.class));
	}

	@Test
	public void testQueueReceive() {
		getJMSClient().sendMessage("TEST.QueueA", "testing msg");
		Message message = getJMSClient().getJmsTemplate()
				.receive("TEST.QueueA");
		assertNotNull(message);
	}

	@Test
	public void testAnnotatedTopicDestinationCreation() {
		assertNotNull(getDestination(TopicDestinationConfiguration.class));
		assertReceiveMessage("TEST.TopicA");
	}

	@Test
	public void testQueueError() {
		getJMSClient().sendMessage("TEST.QueueB", "testing msg");
		Message message = getJMSClient().getJmsTemplate()
				.receive("TEST.QueueA");
		assertNull(message);
	}

}

}}}