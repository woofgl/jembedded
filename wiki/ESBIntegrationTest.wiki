In this example this MULE Model is being tested:

{{{
      <jms:activemq-connector name="jmsConnection"
		brokerURL="tcp://localhost:61616" />
   
    	      <model name="JMSModel">
	         <service name="queue-to-queue">
			<inbound>
			   <jms:inbound-endpoint queue="in.queue"/>
			</inbound>
                          <echo-component/>
			<outbound>
                	   <pass-through-router>
                    	      <jms:outbound-endpoint queue="out.queue"/>
               	 	   </pass-through-router>
           		</outbound>
		 </service>
	       </model>
}}}

A message arrives to the `in.queue`, pass through the `echo-component` and arrives to the `out.queue`.

{{{

//Assert Module for JMS test.
import static org.jsemantic.jintegration.test.jms.Assert.*;

//Assert Module for ESB test.
import static org.jsemantic.jintegration.test.mule.Assert.*;

//ActiveMQ Broker configuration. Default Values used
@ActiveMQServiceConfiguration
@ConnectionFactoryConfiguration
//MuleService including the model xml file.

@MuleServiceConfiguration(configurationFile = "META-INF/integration-mule-test/jms-config.xml")

public class EmbeddedJMSMuleIntegrationTest extends IntegrationTest {
	
        private JMSClient jmsClient = null;
	
	@Test
	public void checkESBInOutMessage() throws Exception {
                // Message sent to ESB Inbound JMS Endpoint
		assertSendMessage("jms://in.queue", "test");

		Message message = getJMSClient().getJmsTemplate().receive("out.queue");
		assertNotNull(message);
		// Message retrieved from ESB Outbound JMS EndPoint
		assertEquals(((TextMessage) message).getText(), "test");
	
	}

        @Test
	public void testInfrastructure() {
		assertMuleServiceNotNull("queue-to-queue");
		assertMuleServiceInboundRouterNotNull("queue-to-queue");
		assertMuleServiceOutboundRouterNotNull("queue-to-queue");
		assertMuleServiceInboundEndPointNotNull("queue-to-queue",
				"endpoint.jms.in.queue");
	}

}

}}}